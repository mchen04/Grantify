events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Security and performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 10M;

    # Buffer optimizations
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Brotli compression (if module available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=general:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=heavy:10m rate=10r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Upstream servers with health checks and load balancing
    upstream frontend {
        least_conn;
        server frontend:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream backend {
        least_conn;
        server backend:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name yourdomain.com www.yourdomain.com;
        
        # Let's Encrypt ACME challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name yourdomain.com www.yourdomain.com;

        # SSL configuration with Let's Encrypt
        ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/yourdomain.com/chain.pem;

        # SSL optimization
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;

        # Content Security Policy (update as needed for your specific requirements)
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.googletagmanager.com *.google-analytics.com *.googleadservices.com; style-src 'self' 'unsafe-inline' *.googleapis.com; img-src 'self' data: blob: *.supabase.co *.googleusercontent.com *.google-analytics.com; font-src 'self' *.googleapis.com *.gstatic.com; connect-src 'self' *.supabase.co *.google-analytics.com wss://*.supabase.co; frame-ancestors 'none'; base-uri 'self';" always;

        # Connection limits
        limit_conn addr 20;

        # API routes with advanced rate limiting
        location /api/ {
            # Different rate limits for different endpoints
            location ~ ^/api/(grants|recommendations) {
                limit_req zone=api burst=20 nodelay;
                limit_req zone=heavy burst=5 nodelay;
            }
            
            location ~ ^/api/(login|signup|reset-password|auth) {
                limit_req zone=auth burst=2 nodelay;
            }
            
            # Admin endpoints (strict rate limiting and IP restrictions)
            location ~ ^/api/admin/ {
                # Restrict to specific IP ranges (update with your admin IPs)
                # allow 10.0.0.0/8;      # Internal network
                # allow 192.168.0.0/16;  # VPN network
                # allow YOUR.ADMIN.IP.HERE;
                # deny all;
                
                limit_req zone=auth burst=5 nodelay;
                limit_req_status 429;
                
                # Add additional auth header check
                if ($http_x_admin_key != "YOUR_SECRET_ADMIN_KEY") {
                    return 403;
                }
            }
            
            # Maintenance endpoints (development only - block in production)
            location ~ ^/api/maintenance/ {
                # Block these endpoints in production
                return 404;
                
                # Or restrict to localhost only for production debugging
                # allow 127.0.0.1;
                # deny all;
            }
            
            # Default API rate limit
            limit_req zone=api burst=10 nodelay;
            
            # Proxy to backend
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }

        # Health check endpoints (no rate limiting, no logging)
        location = /health {
            proxy_pass http://backend/health;
            access_log off;
            proxy_connect_timeout 1s;
            proxy_send_timeout 1s;
            proxy_read_timeout 1s;
        }

        location = /api/health {
            proxy_pass http://frontend/api/health;
            access_log off;
            proxy_connect_timeout 1s;
            proxy_send_timeout 1s;
            proxy_read_timeout 1s;
        }

        # Static files with aggressive caching
        location /_next/static/ {
            proxy_pass http://frontend;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status "STATIC";
            
            # Gzip specific files
            location ~* \.(js|css)$ {
                gzip_static on;
                expires 1y;
            }
        }

        location /static/ {
            proxy_pass http://frontend;
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
            add_header X-Cache-Status "STATIC";
        }

        # Images with caching
        location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|avif)$ {
            proxy_pass http://frontend;
            expires 7d;
            add_header Cache-Control "public, max-age=604800";
            add_header Vary "Accept";
        }

        # Fonts with long-term caching
        location ~* \.(woff|woff2|ttf|eot)$ {
            proxy_pass http://frontend;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin "*";
        }

        # Robots.txt and sitemap
        location = /robots.txt {
            proxy_pass http://frontend;
            expires 1d;
            add_header Cache-Control "public, max-age=86400";
        }

        location = /sitemap.xml {
            proxy_pass http://frontend;
            expires 1d;
            add_header Cache-Control "public, max-age=86400";
        }

        # Manifest and service worker
        location = /manifest.json {
            proxy_pass http://frontend;
            expires 1d;
            add_header Cache-Control "public, max-age=86400";
        }

        location = /sw.js {
            proxy_pass http://frontend;
            expires 0;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # Frontend routes (SPA support)
        location / {
            # Apply general rate limiting
            limit_req zone=general burst=50 nodelay;
            
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Handle SPA routing
            try_files $uri $uri/ @fallback;
        }

        # Fallback for SPA routing
        location @fallback {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Block common attack patterns
        location ~* /\.(htaccess|htpasswd|ini|log|sh|sql|conf)$ {
            deny all;
        }

        location ~* /(config|admin|wp-admin|administrator)/ {
            deny all;
        }

        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }

    # Redirect www to non-www (optional - choose one approach)
    server {
        listen 443 ssl http2;
        server_name www.yourdomain.com;
        
        ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
        
        return 301 https://yourdomain.com$request_uri;
    }
}